
package services;

import java.util.Collection;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.MessageRepository;
import domain.Actor;
import domain.Folder;
import domain.Message;
import domain.Priority;
import domain.Spam;

@Service
@Transactional
public class MessageService {

	public MessageService() {
		super();
	}


	@Autowired
	private MessageRepository	messageRepository;
	@Autowired
	private FolderService		folderService;
	@Autowired
	private ActorService		actorService;
	@Autowired
	private SpamService			spamService;


	// CRUD methods --------------------------------------------------------------------------------
	public Message create() {
		this.actorService.checkActorIsAuthenticated();
		final Message res = new Message();
		res.setPriority(Priority.NEUTRAL);
		final long milliseconds = System.currentTimeMillis() - 100;
		final Date moment = new Date(milliseconds);
		res.setSend(this.actorService.findByPrincipal());
		res.setMoment(moment);
		return res;
	}

	public Message findOne(final int messageId) {
		// Comprueba si el actor está autenticado
		this.actorService.checkActorIsAuthenticated();
		Message res;
		res = this.messageRepository.findOne(messageId);
		return res;
	}

	public Collection<Message> findAll() {
		// Comprueba si el actor está autenticado
		this.actorService.checkActorIsAuthenticated();
		final Collection<Message> res = this.messageRepository.findAll();
		return res;
	}

	public Message save(final Message message) {
		// Comprueba si el actor está autenticado
		this.actorService.checkActorIsAuthenticated();
		return this.messageRepository.save(message);
	}

	public void delete(final Message message) {
		// Comprueba si el actor está autenticado
		this.actorService.checkActorIsAuthenticated();
		//Coprobamos que el mensaje existe
		Assert.isTrue(this.messageRepository.exists(message.getId()));
		Assert.isTrue(message.getFolder().getActor().getId() == this.actorService.findByPrincipal().getId());
		if (message.getFolder().getName().equals("trashbox") && message.getFolder().getIsSystem() == true)
			this.messageRepository.delete(message);
		else
			this.moveMessage(this.folderService.findActorAndFolder(this.actorService.findByPrincipal().getId(), "trashbox"), message);

	}

	// Other methods ------------------------------------------------------------------

	//método para mover un mensaje de una carpeta a otra
	public void moveMessage(final Folder destinyFolder, final Message msg) {
		// Comprueba si el actor está autenticado
		this.actorService.checkActorIsAuthenticated();
		// Comprobamos que la carpeta destino pertenece al actor
		final Actor sender = this.actorService.findByPrincipal();
		final Collection<Folder> folders = sender.getFolders();
		Assert.isTrue(folders.contains(destinyFolder));
		msg.setFolder(destinyFolder);
		this.messageRepository.save(msg);
	}

	public void sendMessage(final Message message) {
		this.actorService.checkActorIsAuthenticated();
		Assert.isTrue(!message.getReceives().contains(message.getSend()));
		Folder folderOutbox;
		final Message msg = message.clone();
		for (final Folder f : message.getSend().getFolders())
			if (f.getName().equalsIgnoreCase("outbox")) {
				folderOutbox = f;
				msg.setFolder(folderOutbox);
				this.messageRepository.save(msg);
				break;
			}

		final Boolean isSpam = this.isSpam(message);
		for (final Actor a : message.getReceives()) {
			final Message msgRe = message.clone();
			Folder folderInbox;
			for (final Folder f : a.getFolders())
				if ((!isSpam && f.getName().equalsIgnoreCase("inbox")) && f.getIsSystem() == true || (isSpam && f.getName().equalsIgnoreCase("spam"))) {
					folderInbox = f;
					msgRe.setFolder(folderInbox);
					this.messageRepository.save(msgRe);
					break;
				}
		}
	}

	private Boolean isSpam(final Message message) {
		final Collection<Spam> spam = this.spamService.findAll();
		Boolean isSpam = false;
		String body = message.getBody();
		body = body.toUpperCase();
		for (final Spam s : spam)
			if (body.contains(s.getKeywords().toUpperCase())) {
				isSpam = true;
				break;
			}

		return isSpam;
	}

}
