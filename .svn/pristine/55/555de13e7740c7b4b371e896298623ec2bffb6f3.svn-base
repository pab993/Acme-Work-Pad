
package controllers;

import java.util.Collection;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import services.ActorService;
import services.BibliographyRecordService;
import services.SubjectService;
import services.TeacherService;
import domain.Actor;
import domain.BibliographyRecord;
import domain.Subject;
import domain.Teacher;

@Controller
@RequestMapping("/bibliographyRecord")
public class BibliographyRecordController extends AbstractController {

	// Services
	// ============================================================================

	@Autowired
	private ActorService				actorService;

	@Autowired
	private TeacherService				teacherService;

	@Autowired
	private BibliographyRecordService	bibliographyRecordService;

	@Autowired
	private SubjectService				subjectService;


	// Constructors
	// ============================================================================

	public BibliographyRecordController() {
		super();
	}

	//List
	// =============================================================================

	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public ModelAndView list(@RequestParam final int subjectId) {
		ModelAndView result;
		boolean own = false;

		try {
			final Actor principal = this.actorService.findByPrincipal();
			Assert.notNull(principal);

			final Subject subject = this.subjectService.findOne(subjectId);
			Assert.notNull(subject);

			if (subject.getTeacher().getId() == principal.getId())
				own = true;

			final Collection<BibliographyRecord> bibliographyRecords = this.bibliographyRecordService.findBySubject(subjectId);
			result = new ModelAndView("bibliographyRecord/list");
			result.addObject("bibliographyRecords", bibliographyRecords);
			result.addObject("own", own);
			result.addObject("subject", subject);
			result.addObject("requestURI", "bibliographyRecord/list.do");

		} catch (final Throwable oops) {

			result = new ModelAndView("redirect:/panic/misc.do");

		}

		return result;

	}

	// Creating
	// ===========================================================================

	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public ModelAndView create(@RequestParam final int subjectId) {
		ModelAndView result;
		BibliographyRecord bibliographyRecord;

		try {
			final Teacher principal = this.teacherService.findByPrincipal();

			final Subject subject = this.subjectService.findOne(subjectId);
			Assert.notNull(subject);
			Assert.isTrue(subject.getTeacher().equals(principal));

			bibliographyRecord = this.bibliographyRecordService.create(subject);

			result = this.createEditModelAndView(bibliographyRecord);

		} catch (final Throwable oops) {

			result = new ModelAndView("redirect:/panic/misc.do");

		}

		return result;
	}
	// Edition
	// =============================================================================

	@RequestMapping(value = "/edit", method = RequestMethod.GET)
	public ModelAndView edit(@RequestParam final int bibliographyRecordId) {
		ModelAndView result;

		try {

			final Teacher principal = this.teacherService.findByPrincipal();

			final BibliographyRecord bibliographyRecord = this.bibliographyRecordService.findOne(bibliographyRecordId);
			Assert.notNull(bibliographyRecord);
			Assert.isTrue(principal.getSubjects().contains(bibliographyRecord.getSubject()));

			result = this.createEditModelAndView(bibliographyRecord);

		} catch (final Throwable oops) {

			result = new ModelAndView("redirect:/panic/misc.do");
		}

		return result;

	}

	// Save
	// =============================================================================

	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "save")
	public ModelAndView save(@Valid final BibliographyRecord bibliographyRecord, final BindingResult binding) {
		ModelAndView result;

		try {

			if (binding.hasErrors())
				result = this.createEditModelAndView(bibliographyRecord);
			else {
				result = new ModelAndView("redirect:/bibliographyRecord/list.do?subjectId=" + bibliographyRecord.getSubject().getId());
				this.bibliographyRecordService.save(bibliographyRecord);

			}
		} catch (final Throwable oops) {
			if (binding.hasErrors())
				result = this.createEditModelAndView(bibliographyRecord);
			else
				result = this.createEditModelAndView(bibliographyRecord, "bibliographyRecord.save.error");
		}

		return result;
	}

	// Deleting
	// ===========================================================================

	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "delete")
	public ModelAndView delete(final BibliographyRecord bibliographyRecord, final BindingResult binding) {
		ModelAndView result;

		try {

			result = new ModelAndView("redirect:/bibliographyRecord/list.do?subjectId=" + bibliographyRecord.getSubject().getId());
			this.bibliographyRecordService.delete(bibliographyRecord);

		} catch (final Throwable oops) {
			result = this.createEditModelAndView(bibliographyRecord, "bibliographyRecord.delete.error");
		}

		return result;

	}

	// Ancilliary methods
	// =================================================================================================

	private ModelAndView createEditModelAndView(final BibliographyRecord bibliographyRecord) {

		return this.createEditModelAndView(bibliographyRecord, null);
	}

	private ModelAndView createEditModelAndView(final BibliographyRecord bibliographyRecord, final String message) {

		final ModelAndView resul = new ModelAndView("bibliographyRecord/edit");

		resul.addObject("bibliographyRecord", bibliographyRecord);
		resul.addObject("message", message);

		return resul;
	}

}
