
package controllers;

import java.util.Collection;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import services.ActorService;
import services.DeliverableService;
import services.GroupService;
import domain.Assignment;
import domain.Deliverable;
import domain.Group;
import domain.Student;
import domain.Subject;

@Controller
@RequestMapping("/deliverable/student")
public class DeliverableStudentController extends AbstractController {

	@Autowired
	private DeliverableService	deliverableService;
	@Autowired
	private ActorService		actorService;
	@Autowired
	private GroupService		groupService;


	// Listing ----------------------------------------------------------------

	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public ModelAndView list(@RequestParam Integer groupId, @RequestParam(defaultValue = "0", required = false) final String message) {
		ModelAndView result;
		Collection<Deliverable> deliverables;

		Student student = (Student) actorService.findByPrincipal();
		Group group = groupService.findOne(groupId);

		deliverables = deliverableService.findAllByGroupAndStudent(group, student);

		result = new ModelAndView("deliverable/list");
		result.addObject("requestURI", "deliverable/student/list.do");
		result.addObject("deliverables", deliverables);

		//			if (!message.equals("0"))
		//				result.addObject("message", message);

		return result;
	}

	// Creation ---------------------------------------------------------------

	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public ModelAndView create(@RequestParam Integer groupId, @RequestParam(defaultValue = "0", required = false) int errorMessage) {
		ModelAndView result;
		Deliverable deliverable;
		Group group = groupService.findOne(groupId);

		//		Student student = (Student) actorService.findByPrincipal();
		deliverable = this.deliverableService.create(group);
		Subject subject = group.getSubject();
		Collection<Assignment> assignments = subject.getAssignments();

		result = this.createEditModelAndView(deliverable);
		result.addObject("deliverable", deliverable);
		result.addObject("assignments", assignments);

		error(result, errorMessage);
		return result;
	}

	// Save ---------------------------------------------------------------

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public ModelAndView save(@Valid final Deliverable deliverable, final BindingResult binding, @RequestParam(defaultValue = "0", required = false) int errorMessage) {
		ModelAndView result;
		if (binding.hasErrors()) {
			result = this.createEditModelAndView(deliverable, "deliverable.commit.error");
			System.out.println(binding);
		} else
			try {
				deliverableService.save(deliverable);

				result = new ModelAndView("redirect:/subject/display.do?subjectId=" + deliverable.getGroup().getSubject().getId());
				//			} catch (final Throwable oops) {
				//				System.out.println(oops.toString());
				//				result = this.createEditModelAndView(deliverable, "deliverable.commit.error");
				//			}

			} catch (Throwable oops) {
				result = new ModelAndView("redirect:/deliverable/student/create.do?groupId=" + deliverable.getGroup().getId() + "&errorMessage=2");
			}

		error(result, errorMessage);
		return result;
	}
	// Ancillary methods ------------------------------------------------------

	protected ModelAndView createEditModelAndView(final Deliverable deliverable) {
		ModelAndView result;

		result = this.createEditModelAndView(deliverable, null);

		return result;
	}

	protected ModelAndView createEditModelAndView(final Deliverable deliverable, final String text) {
		ModelAndView result;

		result = new ModelAndView("deliverable/edit");
		result.addObject("deliverable", deliverable);
		result.addObject("message", text);
		result.addObject("requestURI", "deliverable/student/save.do");

		return result;
	}

	private void error(ModelAndView result, int errorMessage) {
		if (errorMessage != 0) {
			switch (errorMessage) {
			case 2:
				result.addObject("errorMessage", "deliverable.errorDate");
				break;
			default:
				result.addObject("errorMessage", "errorDefault");
				break;
			}
		}
	}

}
