
package services;

import javax.transaction.Transactional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.util.Assert;

import utilities.AbstractTest;
import domain.Student;
import domain.Subject;

@ContextConfiguration(locations = {
	"classpath:spring/junit.xml"
})
@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
public class SubjectServiceTest extends AbstractTest {

	// Attributes -----------------------------------------------------------
	@Autowired
	private SubjectService	subjectService;

	@Autowired
	private ActorService	actorService;


	// Colección de test para probar el requisito 13.1, enrol a subejct.
	// Los tests comprueban que:
	// Un actor autenticado como Student puede inscribirse en una asignatura correctamente.
	// Un actor autenticado como Student no puede inscribirse en una asignatura que no tenga plazas disponibles.
	// Un actor autenticado como Student no puede inscribirse en una asignatura en la que ya esté inscrita.
	// Un actor no autenticado no puede inscribirse en una asignatura.
	// Un actor autenticado como Admin no puede inscribirse en una asignatura.

	@Test
	public void driverEnrolSubject() {
		final Object testingData[][] = {
			{
				"student2", 18, null
			}, {
				"student3", 16, IllegalArgumentException.class
			}, {
				"student1", 18, IllegalArgumentException.class
			}, {
				null, 17, IllegalArgumentException.class
			}, {
				"admin", 17, IllegalArgumentException.class
			}
		};

		for (int i = 0; i < testingData.length; i++)
			this.templateEnrolSubject((String) testingData[i][0], (int) testingData[i][1], (Class<?>) testingData[i][2]);
	}

	protected void templateEnrolSubject(final String username, final int subjectId, final Class<?> expected) {
		Class<?> caught;

		caught = null;
		try {
			super.authenticate(username);
			//			
			final Subject subject = subjectService.findOne(subjectId);
			subjectService.enrol(subject);
			Student student = (Student) actorService.findByPrincipal();
			Assert.isTrue(subject.getStudents().contains(student));
			super.unauthenticate();
		} catch (final Throwable oops) {
			caught = oops.getClass();
		}

		super.checkExceptions(expected, caught);
	}

}
